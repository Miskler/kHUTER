[gd_scene load_steps=5 format=2]

[ext_resource path="res://textures/ui/available_item.png" type="Texture2D" id=1]
[ext_resource path="res://scenes/interface/interface_elements/slot_item.tscn" type="PackedScene" id=2]
[ext_resource path="res://textures/ui/bubble.png" type="Texture2D" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

@onready var SD = get_node(\"/root/rootGame/Node/SettingData\")

@export var significant_data = {}
@export var insignificant_data = {}

func _ready():
	$\"../main\".connect(\"frame_close\", Callable(self, \"reset\"))

func _process(_delta):
	self.set_global_position(get_global_mouse_position())
	
	if get_node(\"../main\").visible == true and $HandSlot.significant_data.hash() != $HandSlot.default_significant_data.hash() and significant_data.hash() != {}.hash() and significant_data.get(\"item\") != null and SD.get_node(\"ItemData\").get(str(significant_data.get(\"item\"))) != null:
		var tile_map = get_node(\"/root/rootGame/Node/TileMap\")
		var names = []
		var local_position = tile_map.to_local(get_node(\"../../../global_mouse_position\").global_position)
		var map_position = tile_map.local_to_map(local_position)
		for i in tile_map.tile_set.get_tiles_ids():
			names.append(tile_map.tile_set.tile_get_name(i))
		
		if SD.get_node(\"ItemData\").get(str(significant_data.get(\"item\"))).get(\"permission_to_install\") in names and (not tile_map.tiles.has(int(map_position.x)) or not tile_map.tiles[int(map_position.x)].has(int(map_position.y))):
			var preview = get_node(\"/root/rootGame/Node/TileMap/Preview\")
			
			var d = tile_map.tile_set.tile_get_texture(tile_map.tile_set.find_tile_by_name(significant_data[\"item\"])).get_size() / tile_map.cell_size
			d -= Vector2(1, 1)
			
			preview.set_cellv(map_position, preview.tile_set.find_tile_by_name(significant_data[\"item\"]), false, false, false, d)


var not_use_ui = true
func reset():
	not_use_ui = false
	#print(\"RESET\")
func _input(event):
	if G.game_settings[\"mobile\"]:
		if !$\"../main\".visible or not event is InputEventScreenTouch or event.get(\"pressed\") == true: 
			return
	
	await get_tree().idle_frame
	if !not_use_ui:
		not_use_ui = true
		return
	
	if ((G.game_settings[\"mobile\"]) or (Input.is_action_just_pressed(\"LBM\") and not G.game_settings[\"mobile\"])) and get_node(\"../main\").visible == true and $HandSlot.significant_data.hash() != $HandSlot.default_significant_data.hash() and significant_data.hash() != {}.hash() and significant_data.get(\"item\") != null and SD.get_node(\"ItemData\").get(str(significant_data.get(\"item\"))) != null:
		await get_tree().idle_frame
		await get_tree().idle_frame
		await get_tree().idle_frame
		if $HandSlot.significant_data.hash() == $HandSlot.default_significant_data.hash() or not get_node(\"../main\").visible: return
		
		var tile_map = get_node(\"/root/rootGame/Node/TileMap\")
		var names = []
		var local_position = tile_map.to_local(get_node(\"../../../global_mouse_position\").global_position)
		var map_position = tile_map.local_to_map(local_position)
		for i in tile_map.tile_set.get_tiles_ids():
			names.append(tile_map.tile_set.tile_get_name(i))
		
		
		#printt(555, map_position, tile_map.to_local(get_node(\"../../../global_mouse_position\").global_position))
		#print(\"\")
		
		#printt(SD.get_node(\"ItemData\").get(str(significant_data.get(\"item\"))).get(\"permission_to_install\") in names, not tile_map.tiles.has(int(map_position.x)), not tile_map.tiles[int(map_position.x)].has(int(map_position.y)))
		if SD.get_node(\"ItemData\").get(str(significant_data.get(\"item\"))).get(\"permission_to_install\") in names and (not tile_map.tiles.has(int(map_position.x)) or not tile_map.tiles[int(map_position.x)].has(int(map_position.y))):
			var tile_id = 0
			
			var d = tile_map.tile_set.tile_get_texture(tile_map.tile_set.find_tile_by_name(significant_data[\"item\"])).get_size() / tile_map.cell_size
			d.x -= 1
			
			tile_map.edit_tile(map_position, {\"tile_name\": {\"operation\": 0, \"value\": significant_data[\"item\"]}, \"autotile_coord\": {\"operation\": 0, \"value\": Vector2(d.x, 0)}})
			if get_tree().network_peer != null:
				tile_map.rpc(\"edit_tile\", map_position, {\"tile_name\": {\"operation\": 0, \"value\": significant_data[\"item\"]}, \"autotile_coord\": {\"operation\": 0, \"value\": Vector2(d.x, 0)}})
			
			
			insignificant_data[\"uni_quantity\"] -= 1
			if insignificant_data[\"uni_quantity\"] <= 0:
				significant_data = $HandSlot.default_significant_data.duplicate()
				insignificant_data = $HandSlot.default_insignificant_data.duplicate()
			
			data_updated()
	elif Input.is_action_just_pressed(\"RBM\") and get_node(\"../main\").visible == true and significant_data.hash() != $HandSlot.default_significant_data.hash() and significant_data.hash() != {}.hash():
		var tile_map = get_node(\"/root/rootGame/Node/TileMap\")
		var local_position = tile_map.to_local(get_node(\"../../../global_mouse_position\").global_position)
		var map_position = tile_map.local_to_map(local_position)
		if not tile_map.tiles.has(int(map_position.x)) or not tile_map.tiles[int(map_position.x)].has(int(map_position.y)):
			var f_name = G.name_generate(\"SlotInWorld\", \"/root/rootGame/Node\")
			
			put_item(significant_data, insignificant_data, get_node(\"../../../global_mouse_position\").global_position, f_name)
			if get_tree().network_peer != null:
				rpc(\"put_item\", significant_data, insignificant_data, get_node(\"../../../global_mouse_position\").global_position, f_name)
			
			#insignificant_data[\"uni_quantity\"] -= 1
			#if insignificant_data[\"uni_quantity\"] <= 0:
			significant_data = $HandSlot.default_significant_data.duplicate()
			insignificant_data = $HandSlot.default_insignificant_data.duplicate()
			
			data_updated()
	not_use_ui = true

func data_updated():
	$HandSlot.significant_data = significant_data
	$HandSlot.insignificant_data = insignificant_data
	$HandSlot.installation_item()
	$HandSlot.item_connecting()

@rpc("any_peer") func put_item(significant_, insignificant_, pos, nam):
	var random_bloc = load(\"res://scenes/entities/supporting/world_item.tscn\").instantiate()
	
	random_bloc.get_node(\"SlotInWorld\").significant_data = significant_
	random_bloc.get_node(\"SlotInWorld\").insignificant_data = insignificant_
	
	random_bloc.global_position = pos
	random_bloc.name = nam
	
	get_node(\"/root/rootGame/Node\").add_child(random_bloc)
"

[node name="MoveItem" type="Node2D"]
script = SubResource( 1 )

[node name="HandSlot" parent="." instance=ExtResource( 2 )]
offset_left = 15.0
offset_top = 15.0
offset_right = 65.0
offset_bottom = 65.0
settings_slot = {
"hide_background": true,
"hide_health": false,
"hide_quantity": false,
"hide_scope": true,
"multiplayer_synchronization": false,
"permission_to_use": false,
"put_items": false,
"slot_capacity": -1,
"slot_off": true,
"take_items": false,
"texture_flip_h": false,
"texture_flip_v": false,
"valid_types": [  ]
}

[node name="TextureRect" type="TextureRect" parent="."]
visible = false
offset_left = -21.0
offset_top = -41.53
offset_right = 19.0
offset_bottom = -1.53
texture = ExtResource( 3 )
expand = true

[node name="Available Item" type="TextureRect" parent="."]
visible = false
offset_left = -21.0
offset_top = -41.53
offset_right = 19.0
offset_bottom = -1.53
texture = ExtResource( 1 )
expand = true
